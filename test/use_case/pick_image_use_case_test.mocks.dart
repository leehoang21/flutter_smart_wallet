// Mocks generated by Mockito 5.1.0 from annotations
// in flutter_smart_wallet/test/use_case/pick_image_use_case_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;
import 'dart:typed_data' as _i4;

import 'package:flutter_smart_wallet/repository/local/pick_image_local_repository.dart'
    as _i5;
import 'package:flutter_smart_wallet/repository/remote/up_and_down_storage_remote_repository.dart'
    as _i2;
import 'package:image_picker/image_picker.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [UpDownStorageRemoteRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpDownStorageRemoteRepository extends _i1.Mock
    implements _i2.UpDownStorageRemoteRepository {
  MockUpDownStorageRemoteRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> putUnit8List({_i4.Uint8List? data, String? pathStorage}) =>
      (super.noSuchMethod(
          Invocation.method(
              #putUnit8List, [], {#data: data, #pathStorage: pathStorage}),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<String> downloadUrl({String? pathStorage}) => (super.noSuchMethod(
      Invocation.method(#downloadUrl, [], {#pathStorage: pathStorage}),
      returnValue: Future<String>.value('')) as _i3.Future<String>);
  @override
  _i3.Future<bool> hasconnection() =>
      (super.noSuchMethod(Invocation.method(#hasconnection, []),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
}

/// A class which mocks [PickImageLocalRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPickImageLocalRepository extends _i1.Mock
    implements _i5.PickImageLocalRepository {
  MockPickImageLocalRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Uint8List?> pickImageFromGallery() =>
      (super.noSuchMethod(Invocation.method(#pickImageFromGallery, []),
              returnValue: Future<_i4.Uint8List?>.value())
          as _i3.Future<_i4.Uint8List?>);
  @override
  _i3.Future<_i4.Uint8List?> captureImage() =>
      (super.noSuchMethod(Invocation.method(#captureImage, []),
              returnValue: Future<_i4.Uint8List?>.value())
          as _i3.Future<_i4.Uint8List?>);
  @override
  _i3.Future<_i4.Uint8List?> pickImage({_i6.ImageSource? source}) =>
      (super.noSuchMethod(Invocation.method(#pickImage, [], {#source: source}),
              returnValue: Future<_i4.Uint8List?>.value())
          as _i3.Future<_i4.Uint8List?>);
  @override
  _i3.Future<List<_i4.Uint8List>> multiImage() =>
      (super.noSuchMethod(Invocation.method(#multiImage, []),
              returnValue: Future<List<_i4.Uint8List>>.value(<_i4.Uint8List>[]))
          as _i3.Future<List<_i4.Uint8List>>);
}
